/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package desktopapp;

import Protocol.BaseRequest;
import Protocol.RequestBigDataResult;
import Protocol.RequestDoBigData;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.sql.Timestamp;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

/**
 *
 * @author cam_i
 */
public class MainWindow extends javax.swing.JFrame {

    private Socket socket;
    private ObjectOutputStream outputStream;
    private ObjectInputStream inputStream;
    private boolean isDataScientist;
    
    /**
     * Creates new form MainWindow
     * @param host
     * @param port
     * @throws java.io.IOException
     */
    public MainWindow(String host,int port) throws IOException {
        initComponents();
        
        socket = new Socket(host,port);
        outputStream = new ObjectOutputStream(socket.getOutputStream());
        inputStream = new ObjectInputStream(socket.getInputStream());
        
        addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                try {
                    stop();
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    public boolean login()
    {
        LoginDialog dialog = new LoginDialog(this,true,inputStream,outputStream);
        dialog.setVisible(true);
        return dialog.isOk();
    }
    
    public void stop() throws IOException
    {
        BaseRequest req = new BaseRequest();
        req.setId(BaseRequest.LOGOUT);
        
        outputStream.writeObject(req);
        
        socket.close();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainTabbedPane = new javax.swing.JTabbedPane();
        viewPane = new javax.swing.JPanel();
        viewTabbedPane = new javax.swing.JTabbedPane();
        cahPane = new javax.swing.JPanel();
        cahTitle = new javax.swing.JLabel();
        cahGraphsPane = new javax.swing.JPanel();
        cahPlot1 = new javax.swing.JLabel();
        cahPlot2 = new javax.swing.JLabel();
        cahText1 = new javax.swing.JLabel();
        cahText2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        cahGlobal = new javax.swing.JLabel();
        cahDate = new javax.swing.JLabel();
        anovaPane = new javax.swing.JPanel();
        anovaTitle = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        anovaPlot = new javax.swing.JLabel();
        anovaText = new javax.swing.JLabel();
        anovaGlobal = new javax.swing.JLabel();
        anovaDate = new javax.swing.JLabel();
        acmPane = new javax.swing.JPanel();
        regPane = new javax.swing.JPanel();
        refreshButton = new javax.swing.JButton();
        doPane = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DesktoppApp");

        mainTabbedPane.setName("View BigData"); // NOI18N

        viewPane.setLayout(new java.awt.BorderLayout());

        cahPane.setLayout(new java.awt.BorderLayout());
        cahPane.add(cahTitle, java.awt.BorderLayout.NORTH);

        java.awt.GridBagLayout cahGraphsPaneLayout = new java.awt.GridBagLayout();
        cahGraphsPaneLayout.columnWeights = new double[] {1.0, 1.0};
        cahGraphsPaneLayout.rowWeights = new double[] {4.0, 1.0};
        cahGraphsPane.setLayout(cahGraphsPaneLayout);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        cahGraphsPane.add(cahPlot1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        cahGraphsPane.add(cahPlot2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        cahGraphsPane.add(cahText1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        cahGraphsPane.add(cahText2, gridBagConstraints);

        cahPane.add(cahGraphsPane, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.GridLayout(2, 1));
        jPanel1.add(cahGlobal);
        jPanel1.add(cahDate);

        cahPane.add(jPanel1, java.awt.BorderLayout.SOUTH);

        viewTabbedPane.addTab("Bénéfices mensuels", cahPane);

        anovaPane.setLayout(new java.awt.BorderLayout());
        anovaPane.add(anovaTitle, java.awt.BorderLayout.NORTH);

        java.awt.GridBagLayout jPanel2Layout = new java.awt.GridBagLayout();
        jPanel2Layout.rowWeights = new double[] {4.0, 1.0, 1.0, 1.0};
        jPanel2.setLayout(jPanel2Layout);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel2.add(anovaPlot, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        jPanel2.add(anovaText, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        jPanel2.add(anovaGlobal, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        jPanel2.add(anovaDate, gridBagConstraints);

        anovaPane.add(jPanel2, java.awt.BorderLayout.CENTER);

        viewTabbedPane.addTab("Routes commerciales", anovaPane);

        javax.swing.GroupLayout acmPaneLayout = new javax.swing.GroupLayout(acmPane);
        acmPane.setLayout(acmPaneLayout);
        acmPaneLayout.setHorizontalGroup(
            acmPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 808, Short.MAX_VALUE)
        );
        acmPaneLayout.setVerticalGroup(
            acmPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 754, Short.MAX_VALUE)
        );

        viewTabbedPane.addTab("Routes particulières", acmPane);

        javax.swing.GroupLayout regPaneLayout = new javax.swing.GroupLayout(regPane);
        regPane.setLayout(regPaneLayout);
        regPaneLayout.setHorizontalGroup(
            regPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 808, Short.MAX_VALUE)
        );
        regPaneLayout.setVerticalGroup(
            regPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 754, Short.MAX_VALUE)
        );

        viewTabbedPane.addTab("Retards", regPane);

        viewPane.add(viewTabbedPane, java.awt.BorderLayout.CENTER);
        viewTabbedPane.getAccessibleContext().setAccessibleName("");

        refreshButton.setText("Refresh");
        refreshButton.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        refreshButton.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        viewPane.add(refreshButton, java.awt.BorderLayout.SOUTH);

        mainTabbedPane.addTab("View BigData", viewPane);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("TO DO");

        javax.swing.GroupLayout doPaneLayout = new javax.swing.GroupLayout(doPane);
        doPane.setLayout(doPaneLayout);
        doPaneLayout.setHorizontalGroup(
            doPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(743, Short.MAX_VALUE))
        );
        doPaneLayout.setVerticalGroup(
            doPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(doPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(774, Short.MAX_VALUE))
        );

        mainTabbedPane.addTab("Do BigData", doPane);

        getContentPane().add(mainTabbedPane, java.awt.BorderLayout.CENTER);
        mainTabbedPane.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        try {
            RequestBigDataResult resp;
            
            switch(viewTabbedPane.getSelectedIndex()){
                case 0:
                    resp = send(RequestDoBigData.CAH);
                    
                    cahGlobal.setText(resp.getValue(RequestBigDataResult.CAH_GLOBAL_TEXT).toString());
                    
                    cahTitle.setText(resp.getValue(RequestBigDataResult.CAH_GLOBAL_TITRE).toString());
                    
                    ImageIcon plot1 = new ImageIcon((byte[])resp.getValue(RequestBigDataResult.CAH_PLOT_ONE));
                    cahPlot1.setIcon(plot1);
                    cahText1.setText(resp.getValue(RequestBigDataResult.CAH_PLOT_ONE_TEXT).toString());
                    
                    ImageIcon plot2 = new ImageIcon((byte[])resp.getValue(RequestBigDataResult.CAH_PLOT_TWO));
                    cahPlot2.setIcon(plot2);
                    cahText2.setText(resp.getValue(RequestBigDataResult.CAH_PLOT_TWO_TEXT).toString());
                    
                    cahDate.setText(((Timestamp)resp.getValue(RequestBigDataResult.CAH_DATE)).toString());
                    break;
                    
                case 1:
                    resp = send(RequestDoBigData.ANOVA);
                    
                    anovaGlobal.setText(resp.getValue(RequestBigDataResult.ANOVA2_GLOBAL_TEXT).toString());
                    
                    anovaTitle.setText(resp.getValue(RequestBigDataResult.ANOVA2_GLOBAL_TITRE).toString());
                    
                    ImageIcon plot = new ImageIcon((byte[])resp.getValue(RequestBigDataResult.ANOVA2_PLOT_ONE));
                    anovaPlot.setIcon(plot);
                    anovaText.setText(resp.getValue(RequestBigDataResult.ANOVA2_PLOT_ONE_TEXT).toString());
                    
                    anovaDate.setText(((Timestamp)resp.getValue(RequestBigDataResult.ANOVA2_DATE)).toString());
                    break;
                    
                case 2:
                    resp = send(RequestDoBigData.ACM);
                    break;
                    
                case 3:
                    resp = send(RequestDoBigData.REG_CORR);
                    break;
            }
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_refreshButtonActionPerformed

    void setDataScientist(boolean isdatascientist) {
        isDataScientist = isdatascientist;
        
        mainTabbedPane.setEnabledAt(1, isdatascientist);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel acmPane;
    private javax.swing.JLabel anovaDate;
    private javax.swing.JLabel anovaGlobal;
    private javax.swing.JPanel anovaPane;
    private javax.swing.JLabel anovaPlot;
    private javax.swing.JLabel anovaText;
    private javax.swing.JLabel anovaTitle;
    private javax.swing.JLabel cahDate;
    private javax.swing.JLabel cahGlobal;
    private javax.swing.JPanel cahGraphsPane;
    private javax.swing.JPanel cahPane;
    private javax.swing.JLabel cahPlot1;
    private javax.swing.JLabel cahPlot2;
    private javax.swing.JLabel cahText1;
    private javax.swing.JLabel cahText2;
    private javax.swing.JLabel cahTitle;
    private javax.swing.JPanel doPane;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTabbedPane mainTabbedPane;
    private javax.swing.JButton refreshButton;
    private javax.swing.JPanel regPane;
    private javax.swing.JPanel viewPane;
    private javax.swing.JTabbedPane viewTabbedPane;
    // End of variables declaration//GEN-END:variables

    private RequestBigDataResult send(int type) throws IOException, ClassNotFoundException {
        RequestDoBigData req = new RequestDoBigData();
        req.setId(BaseRequest.DO_BIG_DATA);
        req.setTypetraitement(type);
        
        outputStream.writeObject(req);
        RequestBigDataResult resp = (RequestBigDataResult)inputStream.readObject();
        
        return resp;
    }
}
